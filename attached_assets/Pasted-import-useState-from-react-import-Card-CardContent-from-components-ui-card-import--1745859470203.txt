import { useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { motion } from "framer-motion";

const theftTemplates = {
  "Cancellation - Traditional, all items were scanned":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks}, scanned {Number of Snacks/Drinks} in the kiosk, canceled the transaction, and left the market area with {Number of Items Left With} unpaid item/s.",
  "Cancellation - Traditional, only some items were scanned":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks}, scanned {Number of Snacks/Drinks} in the kiosk while overlooking {Number of Items Overlooked/Unpaid}, canceled the transaction, and left the market area with {Number of Items Left With} unpaid item/s.",
  "Cancellation - Failed Payment":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and scanned {Number of Snacks/Drinks} in the kiosk. The individual attempted to pay {Number of Items Paid} times {Item Name from the Report}, but it/they was/were unsuccessful. Then, the individual left the market area with {Number of Items Left With} unpaid item/s.",
  "Cancellation - Timeout":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and scanned {Number of Snacks/Drinks} in the kiosk. The individual attempted to pay, but progress was ceased for the transaction. While the pending transaction timed out due to inactivity, the individual left the market area with {Number of Items Left With} unpaid item/s.",
  "Cancellation - Proxy Cancel":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and scanned {Number of Snacks/Drinks} in the kiosk. The individual attempted to pay, but progress was ceased for the transaction. Nevertheless, the individual left the market area with {Number of Items Left With} unpaid item/s while another individual canceled the transaction.",
  "Cancellation/Underinging":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks}, scanned {Number of Snacks/Drinks} in the kiosk, and canceled the transaction. Then, the individual re-scanned the same items, but despite completing the transaction, the individual only paid for {Number of Items Paid} out of {Number of Snacks/Drinks} actual items. Nevertheless, the individual left the market area with {Number of Items Paid} paid items and {Number of Items Overlooked/Unpaid} unpaid items.",
  "Underinging - Traditional":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and scanned {Number of Snacks/Drinks} in the kiosk, but despite completing the transaction, the individual only paid for {Number of Items Paid} out of {Number of Snacks/Drinks} items. Nevertheless, the individual left the market area with {Number of Items Paid} paid items and {Number of Items Overlooked/Unpaid} unpaid items.",
  "Underinging - Free Item":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and scanned {Number of Snacks/Drinks} in the kiosk, but after completing the transaction, selected {Number of Items Overlooked/Unpaid} additional item(s) without scanning. Hence, the individual left the market area with {Number of Items Paid} paid items and {Number of Items Overlooked/Unpaid} unpaid items.",
  "Underinging - Switcheroo":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and interacted with the kiosk, but despite completing the transaction, the individual inputted a totally irrelevant item, identified as a {Name of the Irrelevant Item}, costing {Cost of Irrelevant Item Inputted}, and the cost of the {Name of the Irrelevant Item} was lower than the cost of the item the individual selected, identified as a {Item Name from the Report}. Hence, the individual only paid for the totally irrelevant item. Nevertheless, the individual left the market area with {Number of Items Overlooked/Unpaid} unpaid item/s.",
  "Underinging - No Reports Available":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and scanned {Number of Snacks/Drinks} in the kiosk, but the kiosk's screen showed only {Number of Items Paid} registered. Hence, the individual only paid for {Number of Items Paid} out of {Number of Snacks/Drinks} total items. Nevertheless, the individual left the market area with {Number of Items Paid} paid items and {Number of Items Overlooked/Unpaid} unpaid items.",
  "Walkout - Traditional":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and left the market area without paying for {Number of Snacks/Drinks}.",
  "Walkout - Pseudo-Cancellation":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and scanned {Number of Snacks/Drinks} in the kiosk. The individual attempted to pay, but progress ceased. While the pending transaction returned to the home screen, the individual left with {Number of Items Left With} unpaid item/s.",
  "Walkout - Fake Scan":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and attempted to scan {Number of Snacks/Drinks}, but nothing happened. Then left without paying.",
  "Walkout - Playing with the Kiosk":
    "The individual wearing {Type of Clothing} selected {Number of Snacks/Drinks} and interacted with the kiosk, but did not scan the item(s). Then left without paying.",
  "Null Transactions":
    "The individual wearing {Type of Clothing} entered the market and interacted with the kiosk, but as per the reports, did not scan anything. Selected {Number of Snacks/Drinks} and left with {Number of Items Left With} unpaid item/s after the transaction timed out.",
  "Individual lingers in the market area":
    "The individual wearing {Type of Clothing} entered at {Time Item Consumed Without Paying}, stayed nearby, [insert theft narrative here], returned to the table, stayed until leaving with {Number of Items Overlooked/Unpaid} unpaid items at {Individual Left Time}.",
  "Individual lingers and consumes unpaid items":
    "The individual wearing {Type of Clothing} entered at {Time Item Consumed Without Paying}, stayed nearby, [insert theft narrative here], consumed unpaid items, and left with {Number of Items Overlooked/Unpaid} unpaid items at {Individual Left Time}.",
  "Individual goes off-cam and returns":
    "...the individual went off-cam for a while. Then, the individual returned to the market area...",
  "Kiosk not visible":
    "...However/but, as per the market reports, the transaction was cancelled, and payments involving the item(s) of concern taking place during the indicated timeframe and the succeeding one-hour timeframe were non-existent. Nevertheless, the individual left the market area with {Number of Items Overlooked/Unpaid} items.",
  "Individual re-scans items":
    "[insert theft narrative here]...Then, the individual re-scanned {Number of Items Paid} items...",
  "Individual enters market area with others":
    "The individual wearing {Type of Clothing} entered the market area accompanied by another individual (it is recommended to use the word \"they\")...[insert theft narrative here]"
};

const fieldMappings = {
  typeOfClothing: "Type of Clothing",
  numberOfSnacksDrinks: "Number of Snacks/Drinks",
  numberOfItemsLeft: "Number of Items Left With",
  numberOfItemsPaid: "Number of Items Paid",
  numberOfItemsOverlooked: "Number of Items Overlooked/Unpaid",
  numberOfItemsOverlookedorUnpaidadditionalitems: "Number of Items Overlooked Unpaid additional items",
  nameOfIdentifiedSelectedItemBeingOverLooked: "Name of Identified Selected Item Being OverLooked",
  costOfOverlookedItem: "Cost of Overlooked Item",
  itemNameFromReport: "Item Name from the Report",
  costOfIrrelevantItem: "Cost of Irrelevant Item Inputted",
  nameOfIrrelevantItem: "Name of the Irrelevant Item",
  timeItemConsumed: "Time Item Consumed Without Paying",
  individualLeftTime: "Individual Left Time",
};

export default function TheftNarrativeGenerator() {
  const [formData, setFormData] = useState({
    theftType: "",
    typeOfClothing: "",
    numberOfSnacksDrinks: "",
    numberOfItemsLeft: "",
    numberOfItemsPaid: "",
    numberOfItemsOverlooked: "",
    numberOfItemsOverlookedorUnpaidadditionalitems: "",
    nameOfIdentifiedSelectedItemBeingOverLooked: "",
    costOfOverlookedItem: "",
    itemNameFromReport: "",
    costOfIrrelevantItem: "",
    nameOfIrrelevantItem: "",
    timeItemConsumed: "",
    individualLeftTime: "",
  });

  const [narrative, setNarrative] = useState("");

  const generateNarrative = () => {
    if (!formData.theftType) return;
    let template = theftTemplates[formData.theftType];
    if (!template) return;

    Object.entries(formData).forEach(([key, value]) => {
      const placeholder = `{${fieldMappings[key]}}`;
      if (placeholder) {
        template = template.replaceAll(placeholder, value || "[Not Provided]");
      }
    });

    setNarrative(template);
  };

  const formatFieldName = (fieldName) => {
    return fieldMappings[fieldName] || fieldName;
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <motion.div className="p-6 grid gap-6">
      <Card>
        <CardContent className="grid gap-4">
          <Select onValueChange={(val) => handleChange("theftType", val)}>
            <SelectTrigger>
              <SelectValue placeholder="Select Theft Type" />
            </SelectTrigger>
            <SelectContent>
              {Object.keys(theftTemplates).map(type => (
                <SelectItem key={type} value={type}>{type}</SelectItem>
              ))}
            </SelectContent>
          </Select>

          {Object.keys(formData).filter(key => key !== "theftType").map((key) => (
            <Input
              key={key}
              placeholder={formatFieldName(key)}
              value={formData[key]}
              onChange={(e) => handleChange(key, e.target.value)}
            />
          ))}

          <Button onClick={generateNarrative}>Generate Narrative</Button>
        </CardContent>
      </Card>

      {narrative && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
          <Card>
            <CardContent>
              <Textarea value={narrative} readOnly className="min-h-[200px]" />
              <Button onClick={() => navigator.clipboard.writeText(narrative)} className="mt-4">Copy to Clipboard</Button>
            </CardContent>
          </Card>
        </motion.div>
      )}
    </motion.div>
  );
}
